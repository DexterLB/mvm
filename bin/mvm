#!/usr/bin/env ruby

require 'optparse'
require 'mvm'

class MvmUtil
  def initialize
    @settings = Mvm::Settings.new(
      id_by_hashes: true,
      interactive: true,
      get_data: true
    )

    @parser = OptionParser.new do |opts|
      opts_welcome(opts)
      opts_global(opts)
      opts_library(opts)
      opts_identify(opts)
    end
  end

  def run
    @parser.parse!
  end

  private

  def opts_welcome(opts)
    opts.version = Mvm::VERSION
    opts.banner = 'Identify, rename and list movies.'
    opts.separator ''
    opts.separator 'Usage: mvm [OPTIONS...]'
  end

  def opts_global(opts)
    opts.separator ''
    opts.separator 'Global options:'

    opts.on(
      '-l',
      '--library FOLDER',
      'Set the library folder (the folder with imported movies)'
    ) do |folder|
      @settings.library_folder = folder
      # library.load_movies!(folder)
    end
  end

  def opts_library(opts)
    opts.separator ''
    opts.separator 'Library viewing options:'

    opts.on(
      '-p',
      '--print [FOLDER]',
      'Print all movies in the library (or in the specified folder)'
    ) do |folder|
      library.load_movies!(folder || @settings.library_folder) unless @library
      library.print
    end
  end

  def opts_identify(opts)
    opts.separator ''
    opts.separator 'Identify options:'

    opts.on('-i', '--identify FOLDER',
            'Identify all movies from FOLDER') do |folder|
      identify(folder)
    end

    opts.on('-s', '--save', 'Save movie data to .mvm files') do
      library.store_movies
    end

    opts.on('-r', '--rename', 'Rename movies') do
      puts 'Renaming movies: '
      library.rename_movies! do |(finished, all)|
        Mvm::Library::Cli.progressbar(finished, all)
      end
      puts
    end
  end

  def identify(folder)
    print 'Scanning...'
    library.scan_folder!(folder)
    library.calculate_hashes!
    library.read_metadata!
    puts ' done.'

    if @settings.id_by_hashes
      print 'Searching movie hashes on opensubtitles.org...'
      library.id_by_hashes!
      puts ' done.'
    end

    library.ask_imdb_ids! if @settings.interactive

    if @settings.get_data
      puts 'Getting movie data on imdb:'
      library.get_data! do |progress|
        Mvm::Library::Cli.multi_progressbar(progress)
      end
      puts
    end

    puts "#{library.movies.size} movies identified."
  end

  def library
    @library ||= Mvm::Library.new(settings: @settings)
  end
end

MvmUtil.new.run

# vim: set shiftwidth=2:
